// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRESQL")
}

model User {
  id       Int   @id @default(autoincrement())
  name     String   @db.VarChar(250)
  email    String   @unique @db.VarChar(100)
  password String @db.VarChar(250)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  movies   Movies[]
}

model Movies {
  id       Int   @id @default(autoincrement())
  title    String @db.VarChar(250)
  image    String @db.VarChar(250)
  image_publicId String?
  score    Int? 
  sinopsis String  @db.VarChar(1000) @default("sinopsis")
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  genres   MovieGenre[]
}

model Genres {
  id       Int   @id @default(autoincrement())
  title    String @db.VarChar(250) @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  movies  MovieGenre[]
}

//Many to many tabla intermedia que se genera tambi√©n
model MovieGenre {
  movieId Int
  genreId Int
  movie Movies @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre Genres @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
}
